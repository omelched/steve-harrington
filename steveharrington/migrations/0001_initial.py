# Generated by Django 3.2.8 on 2021-10-05 10:48

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Characteristic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=63, unique=True, verbose_name='name')),
                ('type', models.CharField(choices=[('c', 'common characteristic'), ('p', 'project potential')], max_length=1, verbose_name='characteristic type')),
            ],
            options={
                'verbose_name': 'characteristic',
                'verbose_name_plural': 'characteristics',
            },
        ),
        migrations.CreateModel(
            name='Ecosystem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=63, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'ecosystem',
                'verbose_name_plural': 'ecosystems',
            },
        ),
        migrations.CreateModel(
            name='HarringtonUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jwt_issuance_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='JWT issuance time')),
                ('user', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='harrington_user', to=settings.AUTH_USER_MODEL, verbose_name='harrington user')),
            ],
            options={
                'verbose_name': 'Harrington user',
                'verbose_name_plural': 'Harrington users',
            },
        ),
        migrations.CreateModel(
            name='Term',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=63, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'term',
                'verbose_name_plural': 'terms',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=63, unique=True, verbose_name='name')),
                ('owners', models.ManyToManyField(related_name='projects', to='steveharrington.HarringtonUser', verbose_name='owners')),
            ],
            options={
                'verbose_name': 'project',
                'verbose_name_plural': 'projects',
            },
        ),
        migrations.CreateModel(
            name='EcosystemProjects',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.IntegerField(default=0, verbose_name='rank')),
                ('characteristic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='steveharrington.characteristic', verbose_name='characteristic')),
                ('ecosystem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='steveharrington.ecosystem', verbose_name='ecosystem')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ecosystems', to='steveharrington.project', verbose_name='project')),
            ],
        ),
        migrations.CreateModel(
            name='EcosystemPotentials',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.FloatField(verbose_name='weight')),
                ('characteristic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='potentials', to='steveharrington.characteristic', verbose_name='characteristic')),
                ('ecosystem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='potentials', to='steveharrington.ecosystem', verbose_name='ecosystem')),
                ('potential', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='characteristics', to='steveharrington.characteristic', verbose_name='potential')),
            ],
        ),
        migrations.CreateModel(
            name='EcosystemCharacteristicsTerms',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('a1', models.FloatField(verbose_name='a1')),
                ('a2', models.FloatField(verbose_name='a2')),
                ('a3', models.FloatField(verbose_name='a3')),
                ('a4', models.FloatField(verbose_name='a4')),
                ('characteristic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='terms', to='steveharrington.characteristic', verbose_name='characteristic')),
                ('ecosystem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='characteristics', to='steveharrington.ecosystem', verbose_name='ecosystem')),
                ('term', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='characteristics', to='steveharrington.term', verbose_name='term')),
            ],
        ),
        migrations.AddField(
            model_name='ecosystem',
            name='owners',
            field=models.ManyToManyField(related_name='ecosystems', to='steveharrington.HarringtonUser', verbose_name='owners'),
        ),
    ]
